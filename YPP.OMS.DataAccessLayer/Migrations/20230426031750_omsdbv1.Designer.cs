// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YPP.MH.DataAccessLayer.Models;

#nullable disable

namespace YPP.MH.DataAccessLayer.Migrations
{
    [DbContext(typeof(MHDbContext))]
    [Migration("20230426031750_omsdbv1")]
    partial class omsdbv1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.ApiMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("MarketPlaceType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("MetaData")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Path")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApiMethod");
                });

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ShortCode")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.CountryVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChannelId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("CountryId");

                    b.ToTable("CountryVariant");
                });

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BuyerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ChannelId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("FeedbackDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<byte?>("Rating")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.MarketPlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppId")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("AppSecret")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ConfigName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConfigUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ConfigURL");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("DelistedStock")
                        .HasColumnType("int");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<int?>("ExpireDuration")
                        .HasColumnType("int");

                    b.Property<byte?>("Inactive")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("IsDelete")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("LiveStock")
                        .HasColumnType("int");

                    b.Property<int?>("LowStock")
                        .HasColumnType("int");

                    b.Property<byte[]>("MarketPlaceImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("MarketPlaceName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MetaData")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("OnDemand")
                        .HasColumnType("int");

                    b.Property<int?>("OutOfStock")
                        .HasColumnType("int");

                    b.Property<int?>("PartnerId")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int");

                    b.Property<string>("RedirectUrl")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("RedirectURL");

                    b.Property<string>("Type")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Uri")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("URI");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("PaymentId");

                    b.ToTable("MarketPlace");
                });

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.MarketPlaceOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("MarketPlaceOrderNumber")
                        .HasColumnType("int");

                    b.Property<string>("MetaData")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("OrderedAt")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("RunAt")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("RunDate")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("MarketPlaceOrder");
                });

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("DiscountedPrice")
                        .HasColumnType("float");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<double?>("PricePerItem")
                        .HasColumnType("float");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<string>("PromotionType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.OrderInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BuyerId")
                        .HasColumnType("int");

                    b.Property<string>("BuyerName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CancelBy")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CancelReason")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("ChannelId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Country")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CustomerPaymentMethod")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("District")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("MetaData")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("OrderNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("OrderStatus")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("OrderedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("RecipientName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("RecipientPhoneNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ShipmentProvider")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ShippingAddress")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<double?>("ShippingFee")
                        .HasColumnType("float");

                    b.Property<double?>("ShippingServiceCost")
                        .HasColumnType("float");

                    b.Property<string>("TaxCode")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<double?>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("VoucherId")
                        .HasColumnType("int");

                    b.Property<string>("Ward")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("UserId");

                    b.HasIndex("VoucherId");

                    b.ToTable("OrderInfo");
                });

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CardHolder")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CardNumber")
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Barcode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<double?>("BasePrice")
                        .HasColumnType("float");

                    b.Property<double?>("Cost")
                        .HasColumnType("float");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ProductDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("ProductHeight")
                        .HasColumnType("int");

                    b.Property<int?>("ProductLength")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("ProductWeight")
                        .HasColumnType("int");

                    b.Property<int?>("ProductWidth")
                        .HasColumnType("int");

                    b.Property<int?>("ProviderId")
                        .HasColumnType("int");

                    b.Property<int?>("VoucherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.HasIndex("VoucherId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.ProductChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChannelId")
                        .HasColumnType("int");

                    b.Property<string>("Csku")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("CSKU");

                    b.Property<int?>("InProcess")
                        .HasColumnType("int");

                    b.Property<int?>("Issue")
                        .HasColumnType("int");

                    b.Property<int?>("LastSevenDaySalesAvg")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("Lost")
                        .HasColumnType("int");

                    b.Property<int?>("MinimumThreshold")
                        .HasColumnType("int");

                    b.Property<bool?>("OnDemandRequired")
                        .HasColumnType("bit");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductChannelStatus")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<int?>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("Sold")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierLeadTimes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("ProductChannel");
                });

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<byte[]>("ProductImage1")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("ProductImage");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImage");
                });

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.ProductVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<byte[]>("ProductVariantImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ProductVariantValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Sku")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("SKU");

                    b.Property<int?>("VariantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("VariantId");

                    b.ToTable("ProductVariant");
                });

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.ProductWarehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChannelId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("ProductVariantId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("ProductWarehouse");
                });

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FullAddress")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("ProviderName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Provider");
                });

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.ReturnInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ReturnStatus")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)");

                    b.Property<DateTime?>("ReturnedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("ReturnInfo");
                });

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime");

                    b.Property<byte?>("Inactive")
                        .HasColumnType("tinyint");

                    b.Property<string>("Location")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("MarketPlaceId")
                        .HasColumnType("int");

                    b.Property<string>("RefreshToken")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("RunAt")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ShopId")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("StoreName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Token")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MarketPlaceId");

                    b.ToTable("Store");
                });

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.TaskInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("MarketPlaceType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("MetaData")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Path")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("RunAt")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("TaskName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("TaskInfo");
                });

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Avatar")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("DOB");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Facebook")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FullAddress")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Gender")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Instagram")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Role")
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)");

                    b.Property<string>("IsPublished")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserName" }, "UQ__UserInfo__C9F28456D2DAD606")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.Variant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("VariantName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Variant");
                });

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.Voucher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apply")
                        .HasMaxLength(17)
                        .IsUnicode(false)
                        .HasColumnType("varchar(17)");

                    b.Property<int?>("ChannelId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CollectStartAt")
                        .HasColumnType("date");

                    b.Property<int>("CriteriaOverMoney")
                        .HasColumnType("int");

                    b.Property<int?>("LimitPerCustomer")
                        .HasColumnType("int");

                    b.Property<int?>("MaxDiscountOfferingValueOff")
                        .HasColumnType("int");

                    b.Property<double?>("OfferingMoneyValueOff")
                        .HasColumnType("float");

                    b.Property<double?>("OrderUsedBudget")
                        .HasColumnType("float");

                    b.Property<DateTime?>("PeriodEndTime")
                        .HasColumnType("date");

                    b.Property<DateTime?>("PeriodStartTime")
                        .HasColumnType("date");

                    b.Property<string>("VoucherCode")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("VoucherDiscountType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("VoucherName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("VoucherStatus")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)");

                    b.Property<string>("VoucherType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.ToTable("Voucher");
                });

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("FullAddress")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("WarehouseName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Warehouse");
                });

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.CountryVariant", b =>
                {
                    b.HasOne("YPP.MH.DataAccessLayer.Models.MarketPlace", "Channel")
                        .WithMany("CountryVariants")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__CountryVa__Chann__75A278F5");

                    b.HasOne("YPP.MH.DataAccessLayer.Models.Country", "Country")
                        .WithMany("CountryVariants")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__CountryVa__Count__74AE54BC");

                    b.Navigation("Channel");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.Feedback", b =>
                {
                    b.HasOne("YPP.MH.DataAccessLayer.Models.MarketPlace", "Channel")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__Feedback__Channe__6E01572D");

                    b.HasOne("YPP.MH.DataAccessLayer.Models.ProductVariant", "ProductVariant")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__Feedback__Produc__6D0D32F4");

                    b.Navigation("Channel");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.MarketPlace", b =>
                {
                    b.HasOne("YPP.MH.DataAccessLayer.Models.Country", "Country")
                        .WithMany("MarketPlaces")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__MarketPla__Count__6A30C649");

                    b.HasOne("YPP.MH.DataAccessLayer.Models.Payment", "Payment")
                        .WithMany("MarketPlaces")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__MarketPla__Payme__6B24EA82");

                    b.Navigation("Country");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.MarketPlaceOrder", b =>
                {
                    b.HasOne("YPP.MH.DataAccessLayer.Models.Store", "Store")
                        .WithMany("MarketPlaceOrders")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__MarketPla__Store__7C4F7684");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.OrderDetail", b =>
                {
                    b.HasOne("YPP.MH.DataAccessLayer.Models.OrderInfo", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__OrderDeta__Order__6477ECF3");

                    b.HasOne("YPP.MH.DataAccessLayer.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__OrderDeta__Produ__76969D2E");

                    b.HasOne("YPP.MH.DataAccessLayer.Models.ProductVariant", "ProductVariant")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__OrderDeta__Produ__656C112C");

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.OrderInfo", b =>
                {
                    b.HasOne("YPP.MH.DataAccessLayer.Models.MarketPlace", "Channel")
                        .WithMany("OrderInfoes")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__OrderInfo__Chann__6EF57B66");

                    b.HasOne("YPP.MH.DataAccessLayer.Models.User", "User")
                        .WithMany("OrderInfoes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__OrderInfo__UserI__6FE99F9F");

                    b.HasOne("YPP.MH.DataAccessLayer.Models.Voucher", "Voucher")
                        .WithMany("OrderInfoes")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__OrderInfo__Vouch__70DDC3D8");

                    b.Navigation("Channel");

                    b.Navigation("User");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.Payment", b =>
                {
                    b.HasOne("YPP.MH.DataAccessLayer.Models.Country", "Country")
                        .WithMany("Payments")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__Payment__Country__778AC167");

                    b.HasOne("YPP.MH.DataAccessLayer.Models.User", "CreatedByUser")
                        .WithMany("Payments")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__Payment__Created__787EE5A0");

                    b.Navigation("Country");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.Product", b =>
                {
                    b.HasOne("YPP.MH.DataAccessLayer.Models.Provider", "Provider")
                        .WithMany("Products")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__Product__Provide__68487DD7");

                    b.HasOne("YPP.MH.DataAccessLayer.Models.Voucher", "Voucher")
                        .WithMany("Products")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__Product__Voucher__693CA210");

                    b.Navigation("Provider");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.ProductChannel", b =>
                {
                    b.HasOne("YPP.MH.DataAccessLayer.Models.MarketPlace", "Channel")
                        .WithMany("ProductChannels")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__ProductCh__Chann__6754599E");

                    b.HasOne("YPP.MH.DataAccessLayer.Models.ProductVariant", "ProductVariant")
                        .WithMany("ProductChannels")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__ProductCh__Produ__66603565");

                    b.Navigation("Channel");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.ProductImage", b =>
                {
                    b.HasOne("YPP.MH.DataAccessLayer.Models.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__ProductIm__Produ__73BA3083");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.ProductVariant", b =>
                {
                    b.HasOne("YPP.MH.DataAccessLayer.Models.Product", "Product")
                        .WithMany("ProductVariants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__ProductVa__Produ__71D1E811");

                    b.HasOne("YPP.MH.DataAccessLayer.Models.Variant", "Variant")
                        .WithMany("ProductVariants")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__ProductVa__Varia__72C60C4A");

                    b.Navigation("Product");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.ProductWarehouse", b =>
                {
                    b.HasOne("YPP.MH.DataAccessLayer.Models.MarketPlace", "Channel")
                        .WithMany("ProductWarehouses")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__ProductWa__Chann__7A672E12");

                    b.HasOne("YPP.MH.DataAccessLayer.Models.ProductVariant", "ProductVariant")
                        .WithMany("ProductWarehouses")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__ProductWa__Produ__7B5B524B");

                    b.HasOne("YPP.MH.DataAccessLayer.Models.Warehouse", "Warehouse")
                        .WithMany("ProductWarehouses")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__ProductWa__Wareh__797309D9");

                    b.Navigation("Channel");

                    b.Navigation("ProductVariant");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.ReturnInfo", b =>
                {
                    b.HasOne("YPP.MH.DataAccessLayer.Models.OrderInfo", "Order")
                        .WithMany("ReturnInfoes")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__ReturnInf__Order__628FA481");

                    b.HasOne("YPP.MH.DataAccessLayer.Models.User", "UpdatedByUser")
                        .WithMany("ReturnInfoes")
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__ReturnInf__Updat__6383C8BA");

                    b.Navigation("Order");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.Store", b =>
                {
                    b.HasOne("YPP.MH.DataAccessLayer.Models.MarketPlace", "MarketPlace")
                        .WithMany("Stores")
                        .HasForeignKey("MarketPlaceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__Store__MarketPla__7D439ABD");

                    b.Navigation("MarketPlace");
                });

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.Voucher", b =>
                {
                    b.HasOne("YPP.MH.DataAccessLayer.Models.MarketPlace", "Channel")
                        .WithMany("Vouchers")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__Voucher__Channel__6C190EBB");

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.Country", b =>
                {
                    b.Navigation("CountryVariants");

                    b.Navigation("MarketPlaces");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.MarketPlace", b =>
                {
                    b.Navigation("CountryVariants");

                    b.Navigation("Feedbacks");

                    b.Navigation("OrderInfoes");

                    b.Navigation("ProductChannels");

                    b.Navigation("ProductWarehouses");

                    b.Navigation("Stores");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.OrderInfo", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("ReturnInfoes");
                });

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.Payment", b =>
                {
                    b.Navigation("MarketPlaces");
                });

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.Product", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductVariants");
                });

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.ProductVariant", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("OrderDetails");

                    b.Navigation("ProductChannels");

                    b.Navigation("ProductWarehouses");
                });

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.Provider", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.Store", b =>
                {
                    b.Navigation("MarketPlaceOrders");
                });

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.User", b =>
                {
                    b.Navigation("OrderInfoes");

                    b.Navigation("Payments");

                    b.Navigation("ReturnInfoes");
                });

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.Variant", b =>
                {
                    b.Navigation("ProductVariants");
                });

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.Voucher", b =>
                {
                    b.Navigation("OrderInfoes");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("YPP.MH.DataAccessLayer.Models.Warehouse", b =>
                {
                    b.Navigation("ProductWarehouses");
                });
#pragma warning restore 612, 618
        }
    }
}
